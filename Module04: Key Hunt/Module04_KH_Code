#include <iostream>
using namespace std;

class Node 
{
public:
    int data;
    Node *left, *right;
};

class BST
{
public:
    Node *root;
    BST() {
        root = NULL;
    }
    Node* insert(Node*, int);
    int search(int);
};

Node* BST :: insert(Node* root, int value){
    if (root == NULL) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->left = newNode->right = NULL;
        return newNode;
    }

    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

int BST :: search(int searchKey) {
    Node* current = root;
    while (current != NULL) {
        if (searchKey == current->data) {
            return current->data; 
        } else if (searchKey < current->data) {
            current = current->left; 
        } else {
            current = current->right;
        }
    }
    return -1;
}

int main() 
{
    BST tree;
    string ch = "yes";
    int num, searchKey;
    cout << "Enter the key number:\n";
    cin >> num;

    tree.root = tree.insert(tree.root, num);
    do {
        cout << "Do you want to create another junction (yes/no)?\n";
        cin >> ch;
        if (ch.compare("yes") == 0) {
            cout << "Enter the key number:\n";
            cin >> num;
            tree.root = tree.insert(tree.root, num);
        } else {
            break;
        }
    } while(true);

    cout << "Enter the key to be searched\n";
    cin >> searchKey;

    int result = tree.search(searchKey);
    if (result != -1) {
        cout << result << " found\n";
    } else {
        cout << searchKey << " not found\n";
    }

    return 0;
}
