#include<iostream>
using namespace std;

void dfs(int** matrix, int rows, int cols, int i, int j, bool** visited) {
    if (i < 0 || i >= rows || j < 0 || j >= cols || matrix[i][j] == 0 || visited[i][j])
        return;

    visited[i][j] = true;

    dfs(matrix, rows, cols, i - 1, j - 1, visited);
    dfs(matrix, rows, cols, i - 1, j, visited);
    dfs(matrix, rows, cols, i - 1, j + 1, visited);
    dfs(matrix, rows, cols, i, j - 1, visited);
    dfs(matrix, rows, cols, i, j + 1, visited);
    dfs(matrix, rows, cols, i + 1, j - 1, visited);
    dfs(matrix, rows, cols, i + 1, j, visited);
    dfs(matrix, rows, cols, i + 1, j + 1, visited);
}

int main() {
    int rows, cols;

    cout << "Enter the number of rows:" << endl;
    cin >> rows;

    cout << "Enter the number of columns:" << endl;
    cin >> cols;

    if (rows <= 0 || cols <= 0) {
        cout << "Invalid input" << endl;
        return 0;
    }

    int** matrix = new int*[rows];
    bool** visited = new bool*[rows];
    for (int i = 0; i < rows; ++i) {
        matrix[i] = new int[cols];
        visited[i] = new bool[cols];
    }

    cout << "Enter the matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
            visited[i][j] = false;
        }
    }

    int connectedObjects = 0;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (matrix[i][j] == 1 && !visited[i][j]) {
                dfs(matrix, rows, cols, i, j, visited);
                connectedObjects++;
            }
        }
    }

    cout << "Number of connected objects = " << connectedObjects << endl;

    for (int i = 0; i < rows; ++i) {
        delete[] matrix[i];
        delete[] visited[i];
    }
    delete[] matrix;
    delete[] visited;

    return 0;
}
