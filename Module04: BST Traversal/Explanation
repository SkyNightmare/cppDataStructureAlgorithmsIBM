Implement a C++ program to construct a Binary Search Tree and also display the elements in the tree using Inorder, Preorder, and Postorder traversals.

Let us recall what we have learnt. A Binary Search tree is a binary tree in which each internal node X stores an element, such that the elements stored in the left subtree of X are less than X and elements stored in the right subtree of X are greater than or equal to X. This is called the binary-search-tree property.

To implement Binary Search Tree, we use below-mentioned classes:

'Node' class definition:
class Node {
    public:
    int data;
    Node *left, *right;
};

'BST' class definition:
class BST {
    public :
    Node *root;
    BST() {
        root = NULL;
    }
    Node* insert(Node*, int);
    void preOrder(Node*);
    void inOrder(Node*);
    void postOrder(Node*);
};

Tree Traversal Rules:
Preorder : Root, Left, Right

Inorder: Left, Root, Right

Postorder : Left, Right, Root



Note:
Observe the highlighted output statements in the sample input and output statements for more clarifications.
Do not change the code template given.  Write your code in the provided places alone.
Avoid the usage of exit(0) in your code.  


Sample input statement:

Enter the element to be inserted in the tree

5

Do you want to insert another element (yes/no)?

yes

Enter the element to be inserted in the tree

3

Do you want to insert another element (yes/no)?

yes

Enter the element to be inserted in the tree

6

Do you want to insert another element (yes/no)?

yes

Enter the element to be inserted in the tree

8

Do you want to insert another element (yes/no)?

no

Sample output statement:

Preorder Traversal : The elements in the tree are: 5 3 6 8

Inorder Traversal : The elements in the tree are: 3 5 6 8

Postorder Traversal : The elements in the tree are: 3 8 6 5

Explanation:

1.Node Class:
This class defines a basic node structure for the binary search tree. Each node has an integer data value, a pointer to the left child (left), and a pointer to the right child (right).

2.BST Class:
This class represents the binary search tree. It has a pointer to the root node (root) and includes member functions for insertion and three types of tree traversals: preorder, inorder, and postorder.

3.Insert Function:
The insert function is a recursive function that inserts a new node with the given value into the BST. It compares the value with the current node's data and moves to the left or right subtree accordingly.

4.Traversing Functions:
These functions perform the three types of tree traversals: preorder, inorder, and postorder. They print the node values in the specified order.

5.Main Function:
In the main function, it creates a BST object (tree) and allows the user to insert elements into the tree interactively. After each insertion, it asks if the user wants to insert another element. Then, it displays the elements in the tree using preorder, inorder, and postorder traversals.
